\MINVERSION(2.30)
***********************************************************************
***********************************************************************

\IFNSET(__SPECMODE__)
   \keepfile
   \SET(__SPECMODE__)()
   \IFNSET(_specmode)
      \ERROR(\(The style 'specmode.tml' requires the special mode!))
   \ENDIF
   \IFNDEF(Logo)\DEF(Logo)\modesave()\offleadingspaces
      *This file is automatically generated by DIANA \version().
      \sysinfo()
      \moderestore()\ENDDEF
   \ENDIF
   \IFNDEF(OUTPUTHEADER)
      \DEF(OUTPUTHEADER)\modesave()\if"\islast()"ne"true"then\offleadingspaces
         \eol()****(qgraf number \currentdiagramnumber())\endif\moderestore()\ENDDEF
   \ENDIF
   \DEF(_regular_C)("\isbrowser()"ne"true"and"\islast()"ne"true")\ENDDEF
   \DEF(_browser_C)("\isbrowser()"ne"false"and"\islast()"ne"true")\ENDDEF
   \DEF(_epilog_C)("\islast()"ne"false")\ENDDEF

   \IFNDEF(_B_browser)
     \DEF(_B_browser)
        \SET(_Br_Tp)(\#(2))
        \IFNEQ(_Br_Tp)()
           \IFEQ(_Br_Tp)(not)
              \if "\isbrowser()" ne "true" then
           \ELSE
              \ERROR(\(Begin:browser: unknown )'\#(2)!)
           \ENDIF
        \ELSE
           \if "\isbrowser()" ne "false" then
        \ENDIF
        \UNSET(_Br_Tp)
     \ENDDEF
   \ENDIF

   \IFNDEF(_E_browser)
     \DEF(_E_browser)
       \endif
     \ENDDEF
   \ENDIF


   \IFNDEF(_B_epilog)
     \DEF(_B_epilog)
        \SET(_Br_Tp)(\#(2))
        \IFNEQ(_Br_Tp)()
           \IFEQ(_Br_Tp)(not)
              \if "\islast()" ne "true" then
           \ELSE
              \ERROR(\(Begin:epilog: unknown )'\#(2)!)
           \ENDIF
        \ELSE
           \if "\islast()" ne "false" then
        \ENDIF
        \UNSET(_Br_Tp)
     \ENDDEF
   \ENDIF

   \IFNDEF(_E_epilog)
     \DEF(_E_epilog)
        \endif
     \ENDDEF
   \ENDIF

   \IFNDEF(_GetFName)
     \DEF(_GetFName)
       \if not exist "__Outfname" then
          \export(__Outfname,\#(1))
       \endif
       \if "\islast()" ne "true" and "\import(__Outfname)" ne "null" then
         \if "\pos(.,\import(__Outfname))" ne "-1" then
            \let(__outfname,
                \replace(.,\currentdiagramnumber().,\import(__Outfname))
            )
         \else
            \let(__outfname,\currentdiagramnumber()\import(__Outfname))
         \endif
       \else
          \let(__outfname,\import(__Outfname))
       \endif
     \ENDDEF
   \ENDIF

   \IFNDEF(_OUTPUT)
      \DEF(_OUTPUT)
        \setout(\#(1))\IFDEF(Logo)\Logo()\ENDIF\IFDEF(OUTPUTHEADER)\OUTPUTHEADER()\ENDIF\ENDDEF
   \ENDIF

   \IFNDEF(_B_output)
     \DEF(_B_output)\-
        \_GetFName(\#(2))
        \if "\islast()" ne "true" and "\isbrowser()" ne "true" then
        \let(_NInpStr,\createinput())
        \outpostscript()\outInfoPS()
        \DEF(integrand)
        \if "\islast()" eq "true" or "\isbrowser()" eq "true" then
           \runerror(\(Can't evaluate 'integrand' here!))
        \endif
        \-\let(_i_I,1)
        \onleadingspaces
        \do\+       \getformstr(\get(_i_I))\if"\get(_i_I)"eq"\get(_NInpStr)"
              then\-\endif\eol()\-
        \while "\numcmp(\inc(_i_I,1),\get(_NInpStr))" ne ">" loop
        \killvar(_i_I)
        \+\ENDDEF
        \endif
        \-
        \offblanklines
        \offleadingspaces
        \offtailspaces
        \+\_OUTPUT(\get(__outfname))
     \ENDDEF
   \ENDIF

   \IFNDEF(_E_output)
     \DEF(_E_output)
        \IFDEF(OUTPUTEPILOG)\OUTPUTEPILOG()\ENDIF
        \setout(null)
        \if "\islast()"eq "true"then
             \closePS()
        \elif "\lastdiagramnumber()" eq "\currentdiagramnumber()" then
              \closePS()
        \endif
        \UNDEF(integrand)
        \killvar(_NInpStr)
        \IFDEF(OUTPUTREADY)\OUTPUTREADY()\ENDIF
     \ENDDEF
   \ENDIF

   \IFNDEF(_SpMd_browser)
      \DEF(_SpMd_browser)
           \PUSHQ(_SectCond)(\_browser_C())
      \ENDDEF
   \ENDIF

   \IFNDEF(_SpMd_epilog)
      \DEF(_SpMd_epilog)
           \PUSHQ(_SectCond)(\_epilog_C())
      \ENDDEF
   \ENDIF

   \IFNDEF(_SpMd_regular)
      \DEF(_SpMd_regular)
           \PUSHQ(_SectCond)(\_regular_C())
      \ENDDEF
   \ENDIF

   \IFNDEF(_SpMd_common)
      \DEF(_SpMd_common)
          \SET(_SpMd_cA)()
          \FOR(_i_)(\*)
             \IFDEF(_\_i_()_C)
                \IFNEQ(_SpMd_cA)()
                    \SET(_SpMd_cA)(\GET(_SpMd_cA)or)
                \ENDIF
                \SET(_SpMd_cA)(\GET(_SpMd_cA)\SCAN(\(\)_\_i_()_C)())
             \ELSE
               \SET(_SpMd_cB)(\_i_())
               \IFNEQ(_SpMd_cB)()
                  \ERROR(\(section:common: unknown)'\GET(_SpMd_cB)'!)
               \ENDIF
               \UNSET(_SpMd_cB)
             \ENDIF
          \ENDFOR
          \PUSHQ(_SectCond)(\GET(_SpMd_cA))
          \UNSET(_SpMd_cA)
      \ENDDEF
   \ENDIF

   \IFNDEF(_SpMd_special)
      \DEF(_SpMd_special)
           \PUSHQ(_SectCond)(\#(1))
      \ENDDEF
   \ENDIF

   \IFNDEF(_Get_SC)
     \DEF(_Get_SC)
        \IFDEF(_SpMd_\#(1))
            \SCAN(\(\)_SpMd_\#(1))(\#(2),\#(3),\#(4))
        \ELSE
            \MESSAGE(\(The section )\#(1)\( is unknown!))
            \ERROR(\(unknown section )"\#(1)".)
        \ENDIF
     \ENDDEF
   \ENDIF

   \DEF(setmasstags)
******************************************************************
* This macro sets tags for masses according to its argument:     *
* for example, \setmasstags(0,mmA,mmB) sets 1 for 0 mass, 1 for  *
* mmA, 2 for mmB. Further function \masstag(#) will return the   *
* tag of the mass on corresponding line.                         *
******************************************************************
      \let(_j,-1)
      \FOR(_i)(\*)
         \export(_M_\_i(),\inc(_j,1))
      \ENDFOR
   \ENDDEF

   \function masstag l;\-
     \if not exist "_M_\mass(\get(l))" then
        \runerror(\(masstag: undefined mass )'\mass(\get(l))'!)
     \endif
     \+\return(\import(_M_\mass(\get(l))))
   \end

   \include(sections.tml)
   \SET(_MainStyle)(specmode.tml)

* Now graphics facilities:

******************************   
* Closes the postscript file:*
******************************   
\function closePS;\if exist "_PSoutputname" then\suspendout()
         \modesave()\offblanklines\offleadingspaces
         \-\appendout(\import(_PSoutputname)) \killexp(_PSoutputname)
         \+\import(_PSshowpage)
         %%Trailer
         %%Pages: \import(_PSpage)
         \_PDocFonts(p)
         %%EOF
\moderestore()\restoreout()\endif\if exist "_PSinfoname" then\suspendout()
         \modesave()\offblanklines\offleadingspaces
         \-\appendout(\import(_PSinfoname))\killexp(_PSinfoname)
         \+%%Trailer
         %%Pages: \import(_PSIcounter)
         \_PDocFonts(i)
         %%EOF
\moderestore()\restoreout()\endif\end

\function setpropagatorline particle, linetype, amplitude, thickness;\modesave()\-
   \switch(\get(linetype))
      \case(wavy)\let(linetype,pph)
      \case(arrowWavy)\let(linetype,ppha)
      \case(spiral)\let(linetype,pgl)
      \case(arrowSpiral)\let(linetype,pgla)
      \case(line)\let(linetype,pln)
      \case(arrowLine)\let(linetype,plna)
      \case(nothing)\let(linetype,pe)
   \default()
      \message(\(Possible values are: wavy, arrowWavy, spiral, arrowSpiral, line, arrowLine,nothing))
      \runerror(\(Unknown propagator type )\get(linetype)!)
   \endswitch() 
   \export(_PS_\get(particle),\get(amplitude)\( )\get(thickness)\( )\get(linetype))
\moderestore()\end

\function checkinteger i;\if"\isinteger(\get(i))"ne"true"
   then\runerror(\get(i)\( does NOT an integer!))\endif\return(\get(i))\end 
\function checkfloat i;\if"\isfloat(\get(i))"ne"true"
   then\runerror(\get(i)\( does NOT a float!))\endif\return(\get(i))\end 

\function setIEPSshift particle, shift;\modesave()\-
   \export(_PSIEPS\get(particle)_s,\checkfloat(\get(shift)))
\moderestore()\end

\function setIEPSpars length, width, deltaFS,c1,c2,c3;\modesave()\-
   \export(_PSIEPS_l,\checkfloat(\get(length)))
   \export(_PSIEPS_w,\checkfloat(\get(width)))
   \export(_PSIEPS_fs,\checkfloat(\get(deltaFS)))
   \export(_PSIEPS_c,
                 \checkfloat(\get(c1))\( )
                 \checkfloat(\get(c2))\( )
                 \checkfloat(\get(c3)))   
\moderestore()\end

\function PSabbrev;\if exist "_PSabbrev" then \return()\endif
   \export(_PSabbrev,)
   \export(_PSmoveto,mv)
   \export(_PStranslate,tr)
   \export(_PSupset,uc)
   \export(_PSshowpage,sa)
   \export(_PSshow,so)
   \export(_PSgsave,gv)
   \export(_PSgrestore,gg)
   \export(_PSvertex,v)
   \let(i,0)
   \while exist "_PSRaw_\inc(i,1)p" do
      \if not exist "_PSImage\import(_PSRaw_\get(i)p)" then
         \export(_PSImage\import(_PSRaw_\get(i)p),\import(_PSRaw_\get(i)i))
      \endif
      \let(j,0)
      \while exist "_PSRaw_\get(i)f\inc(j,1)" do
          \export(_PSf_\import(_PSRaw_\get(i)p)_\get(j),\import(_PSRaw_\get(i)f\get(j)))
          \killexp(PSRaw_\get(i)f\get(j))
      \loop
      \if "\numcmp(\get(j),1)" eq ">" then 
         \killexp(_PSf_\import(_PSRaw_\get(i)p)_\get(j))
      \endif
      \if not exist "_PS_\import(_PSRaw_\get(i)p)" then
      \let(tmp,\replace(wavy,pph,\import(_PSRaw_\get(i)v)))
      \let(tmp,\replace(arrowWavy,ppha,\get(tmp)))
      \let(tmp,\replace(spiral,pgl,\get(tmp)))
      \let(tmp,\replace(arrowSpiral,pgla,\get(tmp)))
      \let(tmp,\replace(line,pln,\get(tmp)))
      \let(tmp,\replace(arrowLine,plna,\get(tmp)))
      \let(tmp,\replace(nothing,pe,\get(tmp)))
      \export(_PS_\import(_PSRaw_\get(i)p),\get(tmp))
      \endif
      \killexp(_PSRaw_\get(i)p)\killexp(_PSRaw_\get(i)v)
   \loop
\end

\function setparticleimage particle, theimage;\modesave()\-
   \if exist "_PSoutputname" or exist "_PSinfoname" then
      \runerror(\(Can't change particle image during printing))
   \endif
   \PSabbrev()
   \export(_PSImage\get(particle),{\parseParticleImage(\get(particle),\get(theimage))})
\moderestore()\end

\function initPostscript fname,
                         papersize,
                         orientation,
                         xmargin,
                         ymargin,
                         xleftmargin,
                         ncols,
                         nrows,
                         font,
                         fontsize;\suspendout()
   \if "\coordinatesok()" ne "true" then
      \restoreout()\return()
   \endif
   \PSabbrev()
   \modesave()\offblanklines\offleadingspaces
   \export(_PSoutputname,\get(fname))
   \export(_PSYmargin,\checkinteger(\get(ymargin)))
   \export(_PSXmargin,\checkinteger(\get(xmargin)))
   \export(_PSXLeftMargin,\checkinteger(\get(xleftmargin)))
   \export(_PSNcols,\checkinteger(\get(ncols)))
   \export(_PSNrows,\checkinteger(\get(nrows)))
   \export(_PSfontSize,\checkinteger(\get(fontsize)))
   \export(_PSfont,\get(font))
   \export(_PSF_p_1,\get(font))
   \switch(\export(_PSpaperSize,\get(papersize)))
      \case(A4)\export(_PSwidth,595)\export(_PSheight,842)
      \case(B5)\export(_PSwidth,516)\export(_PSheight,729)
      \case(Letter)\export(_PSwidth,612)\export(_PSheight,791)
      \case(Legal)\export(_PSwidth,612)\export(_PSheight,1009)
      \case(Executive)\export(_PSwidth,541)\export(_PSheight,720)
      \case(A0)\export(_PSwidth,2384)\export(_PSheight,3370)
      \case(A1)\export(_PSwidth,1684)\export(_PSheight,2384)
      \case(A2)\export(_PSwidth,1191)\export(_PSheight,1684)
      \case(A3)\export(_PSwidth,842)\export(_PSheight,1191)
      \case(A5)\export(_PSwidth,420)\export(_PSheight,595)
      \case(A6)\export(_PSwidth,297)\export(_PSheight,420)
      \case(A7)\export(_PSwidth,210)\export(_PSheight,297)
      \case(A8)\export(_PSwidth,148)\export(_PSheight,210)
      \case(A9)\export(_PSwidth,105)\export(_PSheight,148)
      \case(B0)\export(_PSwidth,2920)\export(_PSheight,4127)
      \case(B1)\export(_PSwidth,2064)\export(_PSheight,2920)
      \case(B10)\export(_PSwidth,91)\export(_PSheight,127)
      \case(B2)\export(_PSwidth,1460)\export(_PSheight,2064)
      \case(B3)\export(_PSwidth,1032)\export(_PSheight,1460)
      \case(B4)\export(_PSwidth,729)\export(_PSheight,1032)
      \case(B6)\export(_PSwidth,363)\export(_PSheight,516)
      \case(B7)\export(_PSwidth,258)\export(_PSheight,363)
      \case(B8)\export(_PSwidth,181)\export(_PSheight,258)
      \case(B9)\export(_PSwidth,127)\export(_PSheight,181)
      \case(C5E)\export(_PSwidth,461)\export(_PSheight,648)
      \case(Comm10E)\export(_PSwidth,297)\export(_PSheight,684)
      \case(DLE)\export(_PSwidth,312)\export(_PSheight,624)
      \case(Folio)\export(_PSwidth,595)\export(_PSheight,935)
      \case(Ledger)\export(_PSwidth,1224)\export(_PSheight,792)
      \case(Tabloid)\export(_PSwidth,792)\export(_PSheight,1224)
      \default()
        \message(\(Papersize: one of))
        \message(\(A0 (841 x 1189 mm)))
        \message(\(A1 (594 x 841 mm)))
        \message(\(A2 (420 x 594 mm)))
        \message(\(A3 (297 x 420 mm)))
        \message(\(A4 (210x297 mm, 8.26x11.7 inches)))
        \message(\(A5 (148 x 210 mm)))
        \message(\(A6 (105 x 148 mm)))
        \message(\(A7 (74 x 105 mm)))
        \message(\(A8 (52 x 74 mm)))
        \message(\(A9 (37 x 52 mm)))
        \message(\(B0 (1030 x 1456 mm)))
        \message(\(B1 (728 x 1030 mm)))
        \message(\(B10 (32 x 45 mm)))
        \message(\(B2 (515 x 728 mm)))
        \message(\(B3 (364 x 515 mm)))
        \message(\(B4 (257 x 364 mm)))
        \message(\(B5 (182x257 mm, 7.17x10.13 inches)))
        \message(\(B6 (128 x 182 mm)))
        \message(\(B7 (91 x 128 mm)))
        \message(\(B8 (64 x 91 mm)))
        \message(\(B9 (45 x 64 mm)))
        \message(\(C5E (163 x 229 mm)))
        \message(\(Comm10E (105 x 241 mm, US Common #10 Envelope)))
        \message(\(DLE (110 x 220 mm)))
        \message(\(Executive (7.5x10 inches, 191x254 mm)))
        \message(\(Folio (210 x 330 mm)))
        \message(\(Ledger (432 x 279 mm)))
        \message(\(Legal (8.5x14 inches, 216x356 mm)))
        \message(\(Letter (8.5x11 inches, 216x279 mm)))
        \message(\(Tabloid (279 x 432 mm)))
        \runerror(\(Unknown paper size )\get(papersize).)
   \endswitch()
   \switch(\get(orientation))
      \case(landscape)\export(_PSorientation,Landscape)
      \case(Landscape)\export(_PSorientation,Landscape)
      \case(portrait)\export(_PSorientation,Portrait)
      \case(Portrait)\export(_PSorientation,Portrait)
      \default()
       \message(\(Orientation must be "Portrait" or "Landscape"!))
       \runerror(\(Unknown orientation )\get(orientation).)
   \endswitch()    
   \if "\import(_PSorientation)" eq "Landscape" then
      \let(tmp,\import(_PSwidth))
      \export(_PSwidth,\import(_PSheight))
      \export(_PSheight,\get(tmp))
   \endif
   \if "\numcmp(\import(_PSNcols),1)" eq "<" then
      \export(_PSNcols,1)
   \endif
   \if "\numcmp(\import(_PSNrows),1)" eq "<" then
      \export(_PSNrows,1)
   \endif
   \export(_PSN,\mul(\import(_PSNcols),\import(_PSNrows)))
   \export(_PSh,\sub(\import(_PSheight),\mul(\import(_PSYmargin),4)))
   \export(_PSw,\sub(\import(_PSwidth),\sum(\mul(\import(_PSXmargin),2),\import(_PSXLeftMargin))))
   \export(_PScounter,0)
   \export(_PSpage,0)
   \-\setout(\import(_PSoutputname))
   \+%!PS-Adobe-2.0
   %%Creator: DIAgram ANAlyser Diana
   %%Title: \get(fname)
   %%Orientation: \import(_PSorientation)
   \if "\import(_PSorientation)" eq "Landscape" then
   %%BoundingBox: 0 0 \import(_PSheight) \import(_PSwidth)
   \else
   %%BoundingBox: 0 0 \import(_PSwidth) \import(_PSheight)
   \endif 
   %%DocumentPaperSizes: \import(_PSpaperSize)
   %%Pages: (atend)
   %%DocumentFonts: (atend)
   %%DocumentNeededFonts: (atend)
   %%EndComments\eol()\-
   \moderestore()\restoreout()
   \initps(header.ps,\import(_PSoutputname))
   \suspendout()\modesave()\offblanklines\offleadingspaces\-
   \appendout(\import(_PSoutputname))
   \+/\import(_PSmoveto){moveto}bind def
     /\import(_PStranslate){translate}bind def
     /\import(_PSupset){1 -1 scale}bind def
     /\import(_PSshowpage){showpage}bind def
     /\import(_PSshow){show}bind def
     /\import(_PSgsave){gsave}bind def
     /\import(_PSgrestore){grestore}bind def
     /bb{gsave newpath 2 setlinewidth 0.8 setgray 0 0 moveto 1 index 0 rlineto 0 
      exch rlineto neg 0 rlineto closepath stroke grestore} bind def
     /\import(_PSvertex){5 1 vertex} def
     /dblshow{dup stringwidth pop currentpoint 3 1 roll add exch 3 -1 roll 
     dup currentpoint 3 -1 roll gsave currentpoint newpath moveto 1 setlinewidth 
     1 setgray 1 -1 scale true charpath stroke grestore gsave moveto 1 -1 scale show 
     grestore moveto}bind def
     /lpd{3 1 roll moveto exec}bind def
     \_PAllImages(\(/Img%s%s bind def))
   %%EndProlog
   /fsize \import(_PSfontSize) def
   /\import(_PSfont) findfont \import(_PSfontSize) scalefont setfont\eol()\-
   \moderestore()\restoreout()\end

\function outpostscript;\if not exist
                    "_PSoutputname"then\return()\endif\suspendout()
   \if "\thiscoordinatesok()" ne "true" then
      \restoreout()\return()
   \endif
   \modesave()\offblanklines\offleadingspaces
   \let(N,\mod(\import(_PScounter),\import(_PSN)))
   \export(_PSpage,\sum(\div(\import(_PScounter),\import(_PSN)),1))
   \let(NC,\mod(\get(N),\import(_PSNcols)))
   \let(NR,\div(\get(N),\import(_PSNcols)))
   \let(Width,\div(\import(_PSw),\import(_PSNcols)))
   \let(Height,\div(\import(_PSh),\import(_PSNrows)))
   \if exist "default" then \let(mdef,\import(default))\endif
   \export(default,\(0 2 plna))
   \export(_PScounter,\sum(\import(_PScounter),1))
   \-\appendout(\import(_PSoutputname))
   \if "\get(N)" eq "0" then
   \if "\import(_PScounter)" ne "1" then 
      \+\import(_PSshowpage)   
   \endif
   \+%%Page: \import(_PSpage) \import(_PSpage)
   \if "\import(_PSorientation)" eq "Landscape" then
      \import(_PSgsave) \import(_PSheight) 0 \import(_PStranslate) 90 rotate
   \endif
   \sum(\div(\import(_PSwidth),2),\import(_PSXLeftMargin)) \mul(\import(_PSYmargin),2) \import(_PSmoveto) (\import(_PSpage)) \import(_PSshow)
   \if "\import(_PSorientation)" eq "Landscape" then
      \import(_PSgrestore)
   \endif
   \-\endif
   \+\import(_PSgsave)
   \if "\import(_PSorientation)" eq "Landscape" then
    \import(_PSheight) 0 \import(_PStranslate) 90 rotate 
   \endif 
   \sum(\import(_PSXmargin),\import(_PSXLeftMargin)) \sub(\import(_PSheight),\import(_PSYmargin)) \import(_PStranslate)
   \import(_PSupset) 
   \mul(\get(NC),\get(Width)) \mul(\get(NR),\get(Height)) \import(_PStranslate)
   \get(Width) \get(Height) bb
   \adjust(\import(_PSfontSize),\get(Width),\get(Height))
   (Diagram \currentdiagramnumber(); topology \topologyid()) puttxt
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i()))
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i())) 
   \End(foreach)
   \Begin(foreach,i,1,\numberofvertex())
   \getPSvertex(\i()) \import(_PSvertex)
   \End(foreach)
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarclabel(\i()) {Img\_PImage(\i(),p)} lpd
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarclabel(\i()) {Img\_PImage(\i(),p)} lpd
   \End(foreach)
   \import(_PSgrestore)
   \setout(null)
   \if "\exist(mdef)" eq "true" then \export(default,\get(mdef)) \endif
   \moderestore()\restoreout()\end

\function initInfoPS fname;\suspendout()
   \if "\coordinatesok()" ne "true" then
      \restoreout()\return()
   \endif
   \PSabbrev()
   \modesave()\offblanklines\offleadingspaces
   \export(_PSinfoname,\get(fname))
   \export(_PSIYmargin,50)
   \export(_PSIXmargin,30)
   \export(_PSIfontSize,15)
   \export(_PSIfont,Helvetica-Bold)
   \export(_PSIVfontSize,12)
   \export(_PSIVfont,Times-Bold)
   \export(_PSF_i_1,\import(_PSIfont))
   \export(_PSF_i_2,\import(_PSIVfont))
   \export(_PSIcfont,cf)
   \export(_PSIvfont,vf)
* A4, portrait:
   \export(_PSIwidth,595)
   \export(_PSIheight,842)
   \export(_PSIh,\sub(\import(_PSIheight),\mul(\import(_PSIYmargin),4)))
   \export(_PSIw,\sub(\import(_PSIwidth),\mul(\import(_PSIXmargin),2)))
   \export(_PSIcounter,0)
   \-\setout(\import(_PSinfoname))
   \+%!PS-Adobe-2.0
   %%Creator: DIAgram ANAlyser Diana
   %%Title: \get(fname)
   %%Orientation: Portrait
   %%BoundingBox: 0 0 \import(_PSIwidth) \import(_PSIheight)
   %%DocumentPaperSizes: A4
   %%Pages: (atend)
   %%DocumentFonts: (atend)
   %%DocumentNeededFonts: (atend)
   %%EndComments\eol()\-
   \moderestore()\restoreout()
   \initps(header.ps,\import(_PSinfoname))
   \suspendout()\modesave()\offblanklines\offleadingspaces\-
   \appendout(\import(_PSinfoname))
   \+/\import(_PSmoveto){moveto}bind def
     /\import(_PStranslate){translate}bind def
     /\import(_PSupset){1 -1 scale}bind def
     /\import(_PSshowpage){showpage}bind def
     /\import(_PSshow){show}bind def
     /\import(_PSgsave){gsave}bind def
     /\import(_PSgrestore){grestore}bind def
     /\import(_PSvertex){5 1 vertex} def
     /\import(_PSIcfont){/\import(_PSIfont) findfont \import(_PSIfontSize) scalefont setfont} bind def
     /\import(_PSIvfont){/\import(_PSIVfont) findfont \import(_PSIVfontSize) scalefont setfont} bind def
    /fsize \import(_PSIVfontSize) def
    /cb{0 0 0 setrgbcolor}bind def /cr{1 0.6 0.2 setrgbcolor}bind def
    /crr{1 0 0 setrgbcolor}bind def
     /dblshow{dup stringwidth pop currentpoint 3 1 roll add exch 3 -1 roll 
     dup currentpoint 3 -1 roll gsave currentpoint newpath moveto 1 setlinewidth 
     1 setgray 1 -1 scale true charpath stroke grestore gsave moveto 1 -1 scale show 
     grestore moveto}bind def
    /drawtext{3 1 roll moveto dblshow}bind def
    /lp{exch 3 index 3 index \import(_PSIVfontSize) sub 3 -1 roll crr drawtext 
    drawtext cb}bind def
    /lpd{crr 3 1 roll moveto exec cb} def
    \_PAllImages(\(/Img%s%s bind def))
   %%EndProlog\eol()\-
   \moderestore()\restoreout()\end

\function outInfoPS;\if not exist
                    "_PSinfoname"then\return()\endif\suspendout()
   \if "\thiscoordinatesok()" ne "true" then
      \restoreout()\return()
   \endif
   \modesave()\offblanklines\offleadingspaces
   \let(Width,\import(_PSIw))
   \let(Height,\div(\import(_PSIh),2))
   \if exist "default" then \let(mdef,\import(default))\endif
   \export(default,\(0 2 plna))
   \let(theline,\(0 2 plna))
   \export(_PSIcounter,\sum(\import(_PSIcounter),1))
   \-\appendout(\import(_PSinfoname))
   \+%%Page: \currentdiagramnumber() \import(_PSIcounter)
   \import(_PSIcfont)
   \div(\import(_PSIwidth),2) \mul(\import(_PSIYmargin),2) \import(_PSmoveto) (\import(_PSIcounter)) \import(_PSshow)
   \import(_PSgsave)
* Topology:
   \import(_PSIXmargin) \sub(\import(_PSIheight),\import(_PSIYmargin)) \import(_PStranslate)
   \import(_PSupset)
   \import(_PSgsave)
   \adjust(\import(_PSIfontSize),\get(Width),\get(Height)) 
    pop pop
   \Begin(foreach,i,1,\numberofvertex())
   \getPSvertex(\i()) \import(_PSvertex)
   \End(foreach)
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSInfoArc(\i()) \get(theline)
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSvertex(\i()) \import(_PSvertex)
   \getPSInfoArc(\i()) \get(theline)
   \End(foreach)
   \import(_PSIcfont)
   cr
   \Begin(foreach,i,1,\numberofvertex())
   \getPSvertexlabel(\i()) (\vertexmarks(\i())) drawtext
   \End(foreach)
   \import(_PSIvfont)
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarclabel(\i()) (\linemarks(\i())) (\vectorOnLine(\i(),)) lp 
   \End(foreach)
   \import(_PSIcfont) cr
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSvertexlabel(\i()) (\i()) drawtext
   \End(foreach)
   \import(_PSIvfont)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarclabel(\i()) (\i()) (\vectorOnLine(\i(),))  lp
   \End(foreach)
   \import(_PSgrestore)
   \import(_PSgsave)
*Diagram: 
   0 \get(Height) \import(_PStranslate)
   0 \import(_PSIfontSize) (Diagram \currentdiagramnumber() topology \topologyid() (unique \noncurrenttopologyid(1)) momentaset \currentmomentaset() (of \numberofmomentaset())) 
    puttxt
   \adjust(\import(_PSIfontSize),\get(Width),\get(Height)) pop pop
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i()))
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i())) 
   \End(foreach)
   \Begin(foreach,i,1,\numberofvertex())
   \getPSvertex(\i()) \import(_PSvertex)
   \End(foreach)
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarclabel(\i()) {Img\_PImage(\i(),i)} lpd
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarclabel(\i()) {Img\_PImage(\i(),i)} lpd
   \End(foreach)
   \import(_PSgrestore)
   \import(_PSgrestore)
   \import(_PSshowpage)   
   \setout(null)
   \if "\exist(mdef)" eq "true" then \export(default,\get(mdef)) \endif
   \moderestore()\restoreout()\end

\function outEPS fname,Y,font,fsize;\if "\thiscoordinatesok()" 
                                 ne "true" then\return()\endif\suspendout()
   \if "\numcmp(\get(Y),4)" eq "<" then
      \runerror(\(Too small height )\get(Y).)
   \endif
   \if "\numcmp(\get(fsize),0)" eq "=" then
      \let(TP,false)
      \if "\numcmp(\get(Y),40)" eq ">" then
          \let(fsize,10)
      \else
          \let(fsize,\div(\get(Y),4))
      \endif
   \else
     \let(TP,true)
     \export(_PSF_e_1,\get(font))
   \endif
*  Size restriction! - removed.
*   \if "\numcmp(\get(Y),\let(X,\mul(\get(fsize),4)))" eq "<" then
*      \let(Y,\get(X))
*   \endif
   \PSabbrev()
   \if exist "default" then \let(mdef,\import(default))\endif
   \export(default,\(0 2 plna))
   \let(X,\getXfromY(\get(fsize),\get(Y)));
   \modesave()\offblanklines\offleadingspaces
   \-\setout(\get(fname))
   \+%!PS-Adobe-2.0 EPSF-2.0
   %%Creator: DIAgram ANAlyser Diana
   %%Title: diagram \currentdiagramnumber()
   %%Orientation: Portrait
   %%BoundingBox: 0 0 \get(X) \get(Y)
   \if "\get(TP)" eq "true" then
   %%DocumentFonts: (atend)
   %%DocumentNeededFonts: (atend)
   \endif
   %%EndComments\eol()\-
   \moderestore()\restoreout()
   \initps(header.ps,\get(fname))
   \suspendout()\modesave()\offblanklines\offleadingspaces\-
   \appendout(\get(fname))
   \+/\import(_PSmoveto){moveto}bind def
     /\import(_PStranslate){translate}bind def
     /\import(_PSupset){1 -1 scale}bind def
     \IFSET(EPS_showpage)
     /\import(_PSshowpage){showpage}bind def
     \ENDIF
     /\import(_PSshow){show}bind def
     /\import(_PSgsave){gsave}bind def
     /\import(_PSgrestore){grestore}bind def
     /\import(_PSvertex){5 1 vertex} def
     /fsize \get(fsize) def
   \if "\get(TP)" eq "true" then
     /dblshow{dup stringwidth pop currentpoint 3 1 roll add exch 3 -1 roll 
     dup currentpoint 3 -1 roll gsave currentpoint newpath moveto 1 setlinewidth 
     1 setgray 1 -1 scale true charpath stroke grestore gsave moveto 1 -1 scale show 
     grestore moveto}bind def
     /lpd{3 1 roll moveto exec}bind def
     \_PDiaImages(\(/Img%s%s bind def))
   %%EndProlog
   /\get(font) findfont \get(fsize) scalefont setfont
   \else
   /lpd{pop pop pop}bind def
   %%EndProlog
   \endif
   \import(_PSgsave)
   0 setgray
   0 \get(Y) \import(_PStranslate)
   \import(_PSupset) 
   \adjust(\get(fsize),\get(X),\get(Y))
   pop  pop
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i()))
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i())) 
   \End(foreach)
   \Begin(foreach,i,1,\numberofvertex())
   \getPSvertex(\i()) \import(_PSvertex)
   \End(foreach)
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarclabel(\i()) {Img\_PImage(\i(),e)} lpd
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarclabel(\i()) {Img\_PImage(\i(),e)} lpd
   \End(foreach)
   \import(_PSgrestore)
\IFSET(EPS_showpage)
*showpage:
    sa
\ENDIF
   %%Trailer
   \_PDocFonts(e)
   %%EOF
   \setout(null)
   \if "\exist(mdef)" eq "true" then \export(default,\get(mdef)) \endif
   \moderestore()\restoreout()\end

\function outInfoEPS fname,Y,font,fsize;\if "\thiscoordinatesok()" 
                                 ne "true" then\return()\endif\suspendout()
   \if "\numcmp(\get(Y),4)" eq "<" then
      \runerror(\(Too small height )\get(Y).)
   \endif
   \if "\numcmp(\get(fsize),0)" eq "=" then
      \let(TP,false)
      \if "\numcmp(\get(Y),40)" eq ">" then
          \let(fsize,10)
      \else
          \let(fsize,\div(\get(Y),4))
      \endif
   \else
     \let(TP,true)
     \export(_PSF_ie_1,\get(font))
   \endif
* Size restriction! - removed
*   \if "\numcmp(\get(Y),\let(X,\mul(\get(fsize),4)))" eq "<" then
*      \let(Y,\get(X))
*   \endif
   \if not exist "_PSIEPS_fs" then \export(_PSIEPS_fs,7) \endif
   \if not exist "_PSIEPS_c" then \export(_PSIEPS_c,\(1 0.5 0.3)) \endif
   \if not exist "_PSIEPS_w" then \export(_PSIEPS_w,2) \endif
   \if not exist "_PSIEPS_l" then \export(_PSIEPS_l,20) \endif
   \PSabbrev()
   \if exist "default" then \let(mdef,\import(default))\endif
   \export(default,\(0 2 plna))
   \let(X,\getXfromY(\get(fsize),\get(Y)));
   \modesave()\offblanklines\offleadingspaces
   \-\setout(\get(fname))
   \+%!PS-Adobe-2.0 EPSF-2.0
   %%Creator: DIAgram ANAlyser Diana
   %%Title: diagram \currentdiagramnumber()
   %%Orientation: Portrait
   %%BoundingBox: 0 0 \get(X) \get(Y)
   \if "\get(TP)" eq "true" then
   %%DocumentFonts: (atend)
   %%DocumentNeededFonts: (atend)
   \endif
   %%EndComments\eol()\-
   \moderestore()\restoreout()
   \initps(header.ps,\get(fname))
   \suspendout()\modesave()\offblanklines\offleadingspaces\-
   \appendout(\get(fname))   
   \+/\import(_PSmoveto){moveto}bind def
     /\import(_PStranslate){translate}bind def
     /\import(_PSupset){1 -1 scale}bind def
     \IFSET(EPS_showpage)
     /\import(_PSshowpage){showpage}bind def
     \ENDIF
     /\import(_PSshow){show}bind def
     /\import(_PSgsave){gsave}bind def
     /\import(_PSgrestore){grestore}bind def
     /\import(_PSvertex){5 1 vertex} def
     /fsize \get(fsize) def     
     /larrowup{/nwidth{width 1 add}bind def /swidth{width 0.5 mul}bind def newpath swidth 
     neg 0  moveto 0 len neg rlineto swidth 2 mul 0 rlineto 0 len rlineto closepath fill 
     arrowup} bind def 
     /larrowright{/nwidth{width 1 add}bind def /swidth{width 0.5 mul}bind def newpath 
     0 swidth neg moveto len neg 0 rlineto 0 swidth 2 mul rlineto len 0 rlineto closepath 
     fill arrowright}bind def 
     /parcarr{pstv pop pop pop pop pop pop pop pop pop gsave gx gy translate gstart gend 
     add 2 div rotate gr shft add 0 translate /width \import(_PSIEPS_w)  1 add def /len 
     \import(_PSIEPS_l)  1 add def currentrgbcolor 1 setgray larrowup 0 setgray setrgbcolor 
     /width  \import(_PSIEPS_w) def /len \import(_PSIEPS_l) def larrowup grestore}bind def
     /plnarr{pstv pop pop pop pop pop pop pop pop pop gsave gx gy translate gdy gdx atan 
     rotate gdx gdx mul gdy gdy mul add sqrt 2.0 div shft translate /width 
     \import(_PSIEPS_w)  1 add def /len \import(_PSIEPS_l)  1 add def currentrgbcolor 1 
     setgray larrowright 0 setgray setrgbcolor /width \import(_PSIEPS_w) def /len 
     \import(_PSIEPS_l) def larrowright grestore} bind def
     /parr{6 index /shft exch def 0 0 5 index 0 eq {plnarr}{parcarr}ifelse}bind def 
     \if "\get(TP)" eq "true" then
     /dblshow{dup stringwidth pop currentpoint 3 1 roll add exch 3 -1 roll 
     dup currentpoint 3 -1 roll gsave currentpoint newpath moveto 1 setlinewidth 
     1 setgray 1 -1 scale true charpath stroke grestore gsave moveto 1 -1 scale show 
     grestore moveto}bind def
     /lp{3 1 roll moveto currentfont dup \import(_PSIEPS_fs) 10 div scalefont 
      setfont exch dblshow setfont}bind def
     /lpd{3 1 roll \get(fsize) \import(_PSIEPS_fs) 10 div mul sub moveto exec}bind def
     \_PDiaImages(\(/Img%s%s bind def))
   %%EndProlog
   /\get(font) findfont \get(fsize) scalefont setfont
   \else
   /lpd{pop pop pop}bind def
   /lp{lpd}bind def
   %%EndProlog
   \endif
   \import(_PSgsave)
   0 setgray
   0 \get(Y) \import(_PStranslate)
   \import(_PSupset) 
   \adjust(\get(fsize),\get(X),\get(Y))
   pop  pop
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i()))
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarc(\i()) \import(_PS_\beginpropagator(\i())) 
   \End(foreach)
   \Begin(foreach,i,1,\numberofvertex())
   \getPSvertex(\i()) \import(_PSvertex)
   \End(foreach)
   \Begin(foreach,i,1,\numberofinternallines())
   \getPSarclabel(\i()) {Img\_PImage(\i(),ie)} lpd
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \getPSarclabel(\i()) {Img\_PImage(\i(),ie)} lpd
   \End(foreach)   
   \import(_PSIEPS_c) setrgbcolor
   \Begin(foreach,i,1,\numberofinternallines())
   \import(_PSIEPS\beginpropagator(\i())_s) \getPSInfoArc(\i()) parr
   \getPSarclabel(\i()) (\vectorOnLine(\i(),)) lp 
   \End(foreach)
   \Begin(foreach,i,-1,-\numberofexternallines(),-1)
   \import(_PSIEPS\beginpropagator(\i())_s) \getPSInfoArc(\i()) parr
   \getPSarclabel(\i()) (\vectorOnLine(\i(),)) lp 
   \End(foreach)
\IFSET(EPS_showpage)
*showpage:
    sa
\ENDIF
   \import(_PSgrestore)
   %%Trailer
   \_PDocFonts(ie)
   %%EOF
   \setout(null)
   \if "\exist(mdef)" eq "true" then \export(default,\get(mdef)) \endif
   \moderestore()\restoreout()\end

   \function outputDummyMomenta thename;\modesave()\-
      \let(NM,0)
      \if"\createMomentaTable(_MTBL,)"ne"0"then
          \let(_iMTBL,0)
          \let(NM,\get(_MTBL0))
          \while "\numcmp(\inc(_iMTBL,1),\get(_MTBL0))" ne ">" do
          \+
          \get(_MTBL\get(_iMTBL))
          \-
          \loop          
      \endif      
      \+
      #define \get(thename) "\get(NM)"
      \-
   \moderestore()\end

   \IFNDEF(_B_LINEMARKS)
     \DEF(_B_LINEMARKS)
        \modesave()\-
            \let(__lLM,0)
            \DEF(\#(2))\get(__lLM)\ENDDEF
            \DEF(\#(3))\linemarks(\get(__lLM))\ENDDEF
            \while "\numcmp(\numberofinternallines(),\inc(__lLM,1))" ne "<" do
            \+
     \ENDDEF
   \ENDIF


   \IFNDEF(_E_LINEMARKS)
     \DEF(_E_LINEMARKS)
          \-
          \loop
          \killvar(__lLM)
          \moderestore()
     \ENDDEF
   \ENDIF

   \IFNDEF(_B_VERTEXMARKS)
     \DEF(_B_VERTEXMARKS)
        \modesave()\-
            \let(__lVM,0)
            \DEF(\#(2))\get(__lVM)\ENDDEF
            \DEF(\#(3))\vertexmarks(\get(__lVM))\ENDDEF
            \while "\numcmp(\numberofvertex(),\inc(__lVM,1))" ne "<" do
            \+
     \ENDDEF
   \ENDIF

   \IFNDEF(_E_VERTEXMARKS)
     \DEF(_E_VERTEXMARKS)
          \-
          \loop
          \killvar(__lVM)
          \moderestore()
     \ENDDEF
   \ENDIF

   \IFNDEF(_B_LEFTSPINOR)
     \DEF(_B_LEFTSPINOR)\modesave()\-
            \let(__lLS,0)
            \DEF(\#(2))\get(__il)\ENDDEF
            \while "\let(__il,\leftspinor(\inc(__lLS,1)))" ne "0" do
     \+\ENDDEF
   \ENDIF

   \IFNDEF(_E_LEFTSPINOR)
     \DEF(_E_LEFTSPINOR)\-\loop
          \killvar(__lLS)
          \killvar(__il)
     \moderestore()\ENDDEF
   \ENDIF

   \IFNDEF(_B_RIGHTSPINOR)
     \DEF(_B_RIGHTSPINOR)\modesave()\-
            \let(__lRS,0)
            \DEF(\#(2))\get(__ir)\ENDDEF
            \while "\let(__ir,\rightspinor(\inc(__lRS,1)))" ne "0" do
     \+\ENDDEF
   \ENDIF

   \IFNDEF(_E_RIGHTSPINOR)
     \DEF(_E_RIGHTSPINOR)\-\loop
          \killvar(__lRS)
          \killvar(__ir)
     \moderestore()\ENDDEF
   \ENDIF

   \IFNDEF(_B_DUMMYMOMENTA)
     \DEF(_B_DUMMYMOMENTA)
       \modesave()\-
       \SET(_iN)(\#(2))\DEF(\#(2))\get(_DM\get(_iDM))\ENDDEF
       \SET(_eP)(\#(3))
       \SET(_AeP)(\#(4))
        \if"\dummyMomenta(_DM)"ne"0"then
          \let(_iDM,0)
          \while "\numcmp(\inc(_iDM,1),\get(_DM0))" ne ">" do
          \+
     \ENDDEF
   \ENDIF

   \IFNDEF(_E_DUMMYMOMENTA)
     \DEF(_E_DUMMYMOMENTA)
          \-
          \loop
          \+
          \GET(_eP)
          \-
       \else
          \+
          \GET(_AeP)
          \-
       \endif
       \UNDEF(\GET(_iN))\UNSET(_iN)\UNSET(_eP)\UNSET(_AeP)\moderestore()
     \ENDDEF
   \ENDIF



\ENDIF


